import torch
import torch.nn as nn
import torch.nn.functional as F
import math
import numpy as np
from Content Enhanced Multi-layer Perceptron (CEMLP) Layer import CEFN011

class SKFusion(nn.Module):
    def __init__(self, dim, height=2, reduction=8):
        super(SKFusion, self).__init__()

        self.height = height
        d = max(int(dim / reduction), 4)
        self.cnn = nn.Conv2d(dim, dim, 1, padding=2,bias=False)
        #self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.avg_pool = torch.nn.AvgPool2d(5, 1)
        self.mlp = nn.Sequential(
            nn.Conv2d(dim, dim, 1, bias=False),
            nn.ReLU(),
            nn.Conv2d(dim, dim , 1, bias=False)
        )

        self.softmax = nn.Softmax(dim=1)

    def forward(self, in_feats,in_feats01):
        B, C, H, W = in_feats.shape

        #in_feats = torch.cat(in_feats, dim=1)
        #in_feats = in_feats.view(B, self.height, C, H, W)
        feats_sum = in_feats + in_feats01
        #feats_sum = torch.sum(in_feats, dim=1)
        #feats_sum = torch.mul(in_feats,in_feats01)
        #feats_sum = torch.cat([in_feats,in_feats01],dim=1)
        feats_sum = self.cnn(feats_sum)
        attn = self.mlp(self.avg_pool(feats_sum))
        attn = self.softmax(attn)

        out =  in_feats * attn
        return out

class MABlock01(nn.Module):
    def __init__(self, network_depth, dim, mlp_ratio=4.):
        super().__init__()
        self.dim = dim
        if dim <=9:
            self.dim =dim
        else:
            self.dim = dim
            
        # MABlock01
        self.norm1 = nn.BatchNorm2d(dim)
        self.Linear1 = nn.Conv2d(dim, dim, 3, stride=1, padding=1, groups=dim, dilation=1, padding_mode='reflect')
        self.mixConv1 = MixConv(dim,[3,5,1],1)
        self.Conv31 = nn.Conv2d(dim, dim, 3, stride=1, padding=1, groups=dim, dilation=1, padding_mode='reflect')
        self.Conv51 = nn.Conv2d(dim, dim, 5, stride=1, padding=2, groups=dim, dilation=1, padding_mode='reflect')
        ########
        self.mixConv2 = MixConv(dim,[3,5,1],1)
        self.Linear2 = nn.Conv2d(dim, dim, 3,stride=1, padding=1, dilation=1)
        self.Conv32 = nn.Conv2d(dim+dim+dim, dim, 3, stride=1, padding=1, groups=dim, dilation=1, padding_mode='reflect')
        self.Conv52 = nn.Conv2d(dim+dim+dim, dim, 5, stride=1, padding=2, groups=dim, dilation=1, padding_mode='reflect')
        self.mixConv3 = MixConv(dim,[3,5,1],1,[3,3,3])
        self.Linear3 = nn.Conv2d(dim, dim, 3,stride=1, padding=1, dilation=1)
        self.Conv33 = nn.Conv2d(dim, dim, 3, stride=1, padding=3, groups=dim, dilation=3, padding_mode='reflect')
        self.Conv53 = nn.Conv2d(dim, dim, 5, stride=1, padding=6, groups=dim, dilation=3, padding_mode='reflect')
        
        self.Linear4 = nn.Conv2d(dim+dim+dim, dim, 1)

        # CEFN01
        self.norm2 = nn.BatchNorm2d(dim)
        self.cemlp = CEFN01(network_depth=network_depth, dim=dim, hidden_features=int(mlp_ratio) * dim, out_features=dim)

    def forward(self, x):
        identity = x
        a = self.norm1(x)
        b = self.Linear1(a)
        x1 = self.mixConv1(b)
        x11 = self.Conv31(b)
        x12 = self.Conv51(b)
        C1 = torch.concatenate((x1, x11,x12), dim=1)
        #C1 = x1* x11*x12
        #C1 = x1+ x11+x12
        x2 = self.mixConv2(C1)
        x2i = self.Linear2(x2)
        
        x21 = self.Conv32(C1)
        x22 = self.Conv52(C1)
        
        x3 = self.mixConv2(x2i)
        x3i = self.Linear3(x3)
        x31 = self.Conv33(x21)
        x32 = self.Conv53(x22)
       
        C2 =torch.concatenate((x3, x31,x32), dim=1)
       # C2 =x3* x31*x32
        #C2 =x3+ x31+x32
        xi = self.Linear4(C2) + identity
        
        identity = x
        xa = self.norm2(xi)
        xb = self.cemlp(xa) + identity
       
        return xi
    
MM = MABlock01(network_depth=2, dim=3,)(y)
print(MM.shape)

output11 = torch.squeeze(MM, 0)
na1 = output11.detach().numpy()
#output1 =np.transpose(output1,axes=[0,2,3,1]).copy()
print(na1.shape)
na1 =np.transpose(na1,axes=[1,2,0])
print(na1.shape)
plt.imshow(na1)


class MABlock0101(nn.Module):
    def __init__(self, network_depth, dim, depth, mlp_ratio=4.):
        super().__init__()
        self.dim = dim
        self.depth = depth

        # build blocks
        self.blocks = nn.ModuleList([
            MABlock01(network_depth=self.depth,
                     dim=self.dim,
                     mlp_ratio=mlp_ratio)
            for i in range(depth)])

    def forward(self, x):
        for blk in self.blocks:
            x = blk(x)
        return x


class PatchEmbed(nn.Module):
    def __init__(self, patch_size=4, in_chans=3, embed_dim=96, kernel_size=None):
        super().__init__()
        self.in_chans = in_chans
        self.embed_dim = embed_dim

        if kernel_size is None:
            kernel_size = patch_size

        self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=kernel_size, stride=patch_size,
                              padding=(kernel_size - patch_size + 1) // 2, padding_mode='reflect')

    def forward(self, x):
        x = self.proj(x)
        return x


class PatchUnEmbed(nn.Module):
    def __init__(self, patch_size=4, out_chans=3, embed_dim=96, kernel_size=None):
        super().__init__()
        self.out_chans = out_chans
        self.embed_dim = embed_dim

        if kernel_size is None:
            kernel_size = 1

        self.proj = nn.Sequential(
            nn.Conv2d(embed_dim, out_chans * patch_size ** 2, kernel_size=kernel_size,
                      padding=kernel_size // 2, padding_mode='reflect'),
            nn.PixelShuffle(patch_size)
        )

    def forward(self, x):
        x = self.proj(x)
        return x


class Dehaze01(nn.Module):
    def __init__(self, in_chans=3, out_chans=4,
                 embed_dims=[24, 48, 96, 48, 24],
                 mlp_ratios=[2., 4., 4., 2., 2.],
                 depths=[16, 16, 16, 8, 8], ):
        super(Dehaze01, self).__init__()

        self.patch_size = 4
        self.mlp_ratios = mlp_ratios

        self.patch_embed = PatchEmbed(
            patch_size=1, in_chans=in_chans, embed_dim=embed_dims[0], kernel_size=3)

        # backbone
        self.layer1 = MABlock0101(network_depth=sum(depths), dim=embed_dims[0], depth=depths[0], mlp_ratio=mlp_ratios[0])

        self.patch_merge1 = PatchEmbed(
            patch_size=2, in_chans=embed_dims[0], embed_dim=embed_dims[1])

        self.skip1 = nn.Conv2d(embed_dims[0], embed_dims[0], 1)

        self.layer2 = MABlock0101(network_depth=sum(depths), dim=embed_dims[1], depth=depths[1], mlp_ratio=mlp_ratios[1])

        self.patch_merge2 = PatchEmbed(
            patch_size=2, in_chans=embed_dims[1], embed_dim=embed_dims[2])

        self.skip2 = nn.Conv2d(embed_dims[1], embed_dims[1], 1)

        self.layer3 = MABlock0101(network_depth=sum(depths), dim=embed_dims[2], depth=depths[2], mlp_ratio=mlp_ratios[2])

        self.patch_split1 = PatchUnEmbed(
            patch_size=2, out_chans=embed_dims[3], embed_dim=embed_dims[2])

        assert embed_dims[1] == embed_dims[3]
        self.fusion1 = SKFusion(embed_dims[3])

        self.layer4 = MABlock0101(network_depth=sum(depths), dim=embed_dims[3], depth=depths[3], mlp_ratio=mlp_ratios[3])

        self.patch_split2 = PatchUnEmbed(
            patch_size=2, out_chans=embed_dims[4], embed_dim=embed_dims[3])

        assert embed_dims[0] == embed_dims[4]
        self.fusion2 = SKFusion(embed_dims[4])

        self.layer5 = MABlock0101(network_depth=sum(depths), dim=embed_dims[4], depth=depths[4], mlp_ratio=mlp_ratios[4])

        self.patch_unembed = PatchUnEmbed(
            patch_size=1, out_chans=out_chans, embed_dim=embed_dims[4], kernel_size=3)

    def check_image_size(self, x):
        _, _, h, w = x.size()
        patch_size = self.patch_size
        mod_pad_h = (patch_size - h % patch_size) % patch_size
        mod_pad_w = (patch_size - w % patch_size) % patch_size
        x = F.pad(x, (0, mod_pad_w, 0, mod_pad_h), 'reflect')
        return x

    def forward_features(self, x):
        x = self.patch_embed(x)
        x = self.layer1(x)
        skip1 = x

        x = self.patch_merge1(x)
        x = self.layer2(x)
        skip2 = x

        x = self.patch_merge2(x)
        x = self.layer3(x)
        x = self.patch_split1(x)

        x = self.fusion1([x, self.skip2(skip2)]) + x
        x = self.layer4(x)
        x = self.patch_split2(x)

        x = self.fusion2([x, self.skip1(skip1)]) + x
        x = self.layer5(x)
        x = self.patch_unembed(x)
        return x

    def forward(self, x):
        H, W = x.shape[2:]
        x = self.check_image_size(x)

        feat = self.forward_features(x)
        K, B = torch.split(feat, (1, 3), dim=1)

        x = K * x - B + x
        x = x[:, :, :H, :W]
        return x


def MixViT-T():
    return Dehaze(
        embed_dims=[24, 48, 96, 48, 24],
        mlp_ratios=[4., 4., 4., 4., 4.],
        depths=[1, 1, 2, 1, 1],
    )


def MixViT():
    return Dehaze(
        embed_dims=[24, 48, 96, 48, 24],
        mlp_ratios=[4., 4., 4., 4., 4.],
        depths=[2, 2, 4, 2, 2],
    )


def MixViT-B():
    return Dehaze(
        embed_dims=[24, 48, 96, 48, 24],
        mlp_ratios=[4., 4., 4., 4., 4.],
        depths=[4, 4, 4, 4, 4],
    )
